{"version":3,"file":"static/js/901.97434690.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","redux/filter/filterSelector.js","webpack://goit-react-hw-08-phonebook/./src/components/UpdateContactForm/UpdateContactForm.module.css?4956","components/UpdateContactForm/UpdateContactForm.jsx","components/UpdateContactModal/UpdateContactModal.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactItem.jsx","components/ContactsList/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// import { createSelector } from \"@reduxjs/toolkit\";\n// import { selectFilter } from \"redux/filter/filterSelector\";\n\nexport const selectContact = state => state.contacts.items;\nexport const selectLoader = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\n// export const selectFilteredContact = createSelector(\n//     [selectContact, selectFilter],\n//     (contacts, filter) => {\n//         return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n//     }\n// )","export const selectFilter = state => state.filter;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"UpdateContactForm_form__928GT\",\"label\":\"UpdateContactForm_label__VnYi7\",\"input\":\"UpdateContactForm_input__rlPkT\",\"button\":\"UpdateContactForm_button__f7nv9\"};","import { useDispatch } from \"react-redux\";\nimport { updateContact } from \"redux/contacts/operations\";\nimport { toast } from 'react-toastify';\nimport { useFormik } from 'formik';\nimport css from './UpdateContactForm.module.css';\n\nexport const UpdateContactForm = ({ onClose, id, name, number }) => {\n\n    const dispatch = useDispatch();\n    console.log(id);\n\n    const handleSubmit = (values, { resetForm }) => {\n        dispatch(updateContact({ id, values }))\n        .unwrap()\n        .then(() => {\n            onClose();\n        })\n        .catch(() => toast.error('Something went wrong. Please try again'));\n    \n        resetForm();\n    };\n\n    const formik = useFormik({\n        initialValues: {\n            name,\n            number,\n        },\n        onSubmit: handleSubmit,\n    });\n\n    return (\n      <>\n        <form className={css.form} onSubmit={formik.handleSubmit}>\n                <label className={css.label} id=\"name\" htmlFor=\"name\">Name\n                  <input className={css.input}\n                    type=\"text\"\n                    name=\"name\"\n                    value={formik.values.name}\n                    id=\"name\"\n                    onChange={formik.handleChange}\n                    error={formik.touched.name && formik.errors.name}\n                  />\n                </label>\n                <label className={css.label} id=\"number\" htmlFor=\"number\">Phone\n                    <input className={css.input}\n                        type=\"tel\"\n                        name=\"number\"\n                        value={formik.values.number}\n                        id=\"number\"\n                        onChange={formik.handleChange}\n                        error={formik.touched.name && formik.errors.name}\n                    />\n                </label>\n              <button type=\"submit\" >Update contact</button>\n            </form>\n      </>\n    )\n}","import { Backdrop, Box, Modal, Fade } from '@mui/material';\nimport { UpdateContactForm } from 'components/UpdateContactForm/UpdateContactForm';\nimport PropTypes from 'prop-types';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n    zIndex: 1000,\n    borderRadius: '15px',\n  };\n\nexport const UpdateContactModal = ({\n    isOpenModal,\n    onClose,\n    id,\n    name,\n    number,\n}) => (\n    <Modal\n      open={isOpenModal}\n      onClose={onClose}\n      closeAfterTransition\n      backdrop={Backdrop}\n      props={{\n        timeout: 50,\n      }}\n      aria-labelledby=\"spring-modal-name\"\n      aria-describedby=\"spring-modal-number\"\n    >\n      <Fade in={isOpenModal}>\n        <Box sx={style}>\n          <UpdateContactForm\n            onClose={onClose}\n            id={id}\n            name={name}\n            number={number}\n          />\n        </Box>\n      </Fade>\n    </Modal>\n);\n\nUpdateContactModal.propTypes = {\n    isOpenModal: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    id: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  };","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__mmE3Y\",\"item\":\"ContactsList_item__6gc1x\",\"updateBtn\":\"ContactsList_updateBtn__Ncq-d\",\"name\":\"ContactsList_name__cbzy1\",\"number\":\"ContactsList_number__9xIVj\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useState } from 'react';\nimport { UpdateContactModal } from 'components/UpdateContactModal/UpdateContactModal';\nimport propTypes from 'prop-types';\nimport css from './ContactsList.module.css';\n\nexport const ContactItem = ({ id, name, number }) => {\n\n    const dispatch = useDispatch();\n\n    console.log(id);\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const handleOpenModal = () => setIsModalOpen(true);\n    const handleCloseModal = () => setIsModalOpen(false);\n\n    const onDeleteBtn = (id) => dispatch(deleteContact(id));\n\n    return (\n        <>\n            <button type=\"button\" onClick={handleOpenModal} className={css.updatebtn}>Update</button>\n            <UpdateContactModal\n                isOpenModal={isModalOpen}\n                onClose={handleCloseModal}\n                id={id}\n                name={name}\n                number={number}\n            />\n            <p className={css.name}>{name}</p>\n            <p className={css.number}>{number}</p>\n            <button type=\"button\" onClick={() => onDeleteBtn(id)}>Delete</button>\n        </>\n    )\n}\n\nContactItem.propTypes = {\n    id: propTypes.string,\n    name: propTypes.string.isRequired,\n    number: propTypes.string.isRequired,\n  };","import { useSelector } from 'react-redux';\nimport { selectContact } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/filter/filterSelector';\nimport { ContactItem } from './ContactItem';\nimport propTypes from 'prop-types';\nimport css from './ContactsList.module.css';\n\nexport default function ContactsList() {\n    const contacts = useSelector(selectContact);\n    const filterValue = useSelector(selectFilter);\n\n\n    const filteredContacts = (contacts, filterValue) => \n      filterValue\n        ? contacts.filter(contact => contact.name.toLowerCase().includes(filterValue.toLowerCase()))\n        : contacts;\n\n    const filterContacts = filteredContacts(contacts, filterValue);\n\n    return (\n        <>\n         <ul className={css.list}>\n            {filterContacts.map(({ id, name, number }) => (\n              <li key={id} className={css.item}>\n                <ContactItem key={id} id={id} name={name} number={number}/>\n              </li>\n            ))}\n         </ul>\n        </>\n    )\n}\n\nContactsList.propTypes = {\n    contacts: propTypes.arrayOf(\n      propTypes.exact({\n        id: propTypes.string,\n        name: propTypes.string,\n        number: propTypes.string,\n      }),\n    ),\n  };","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport { setFilter } from \"redux/filter/filterSlice\";\nimport { selectFilter } from \"redux/filter/filterSelector\";\nimport css from './Filter.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Filter() {\n    const filterValue = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    const handleChangeFilter = e => dispatch(setFilter(e.target.value));\n\n    return (\n      <>\n        <label className={css.label} name=\"filter\" value=\"filterValue\" htmlFor=\"filter\">\n            Find contact by name\n            <input className={css.input}\n                type=\"text\"\n                value={filterValue}\n                id=\"filter\"\n                onChange={handleChangeFilter}/>\n        </label>\n      </>\n    )\n}\n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\"};","import {useState} from 'react';\nimport { useSelector, useDispatch} from 'react-redux';\nimport { selectContact } from 'redux/contacts/selectors';\nimport PropTypes from 'prop-types';\nimport css from './ContactForm.module.css';\nimport { addContact } from 'redux/contacts/operations';\n\nexport default function ContactForm() {\n\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector(selectContact);\n    const dispatch = useDispatch();\n\n\n    const onAddContact = (name, number) => dispatch(addContact({name, number}));\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const isAdded = name => \n        contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase());\n        \n        if(isAdded(name)) {\n            return alert(`${name} is already in contacts`);\n        } else {\n            onAddContact(name, number);\n        }\n        contacts.map(contact => console.log(contact.id));\n        setName(''); \n        setNumber('');\n    }\n\n        return (\n          <>\n            <form className={css.form} onSubmit={e => handleSubmit(e)} autoComplete=\"off\">\n                <label className={css.label} id=\"name\" htmlFor=\"name\">Name\n                  <input className={css.input}\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    id=\"name\"\n                    onChange={e => setName(e.target.value)}\n                    // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    // required\n                  />\n                </label>\n                <label className={css.label} id=\"number\" htmlFor=\"number\">Phone\n                    <input className={css.input}\n                        type=\"tel\"\n                        name=\"number\"\n                        value={number}\n                        id=\"number\"\n                        onChange={e => setNumber(e.target.value)}\n                        // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        // title=\"Phone phone must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        // required\n                    />\n                </label>\n              <button type=\"submit\" disabled={!(name && number)}>Add contact</button>\n            </form>\n          </>\n        );\n      }\n\nContactForm.propTyps = {\n    contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onAddContact: PropTypes.func.isRequired, \n}","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsPage_section__WlQMx\"};","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoader, selectContact, selectError } from 'redux/contacts/selectors';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from '../../components/Filter/Filter';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport css from './ContactsPage.module.css';\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectLoader);\n    const contacts = useSelector(selectContact);\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n      <>\n        <div className={css.section}>\n            <h1>Phonebook</h1>\n            <ContactForm/>\n            {isLoading && !error && <b>Request in progress...</b>}\n        </div>\n        {contacts.length ? (\n        <div className={css.section}>\n            <h2>Contacts</h2>\n            <Filter/>\n            <ContactsList/>\n        </div>\n        ) : null}\n      </>\n    )\n};\n"],"names":["selectContact","state","contacts","items","selectLoader","isLoading","selectError","error","selectFilter","filter","UpdateContactForm","onClose","id","name","number","dispatch","useDispatch","console","log","formik","useFormik","initialValues","onSubmit","values","resetForm","updateContact","unwrap","then","catch","toast","className","css","handleSubmit","htmlFor","type","value","onChange","handleChange","touched","errors","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","zIndex","borderRadius","UpdateContactModal","isOpenModal","Modal","open","closeAfterTransition","backdrop","Backdrop","props","timeout","Fade","in","Box","sx","ContactItem","useState","isModalOpen","setIsModalOpen","onClick","deleteContact","onDeleteBtn","ContactsList","filterContacts","filterValue","contact","toLowerCase","includes","filteredContacts","useSelector","map","Filter","e","setFilter","target","ContactForm","setName","setNumber","preventDefault","some","isAdded","alert","addContact","onAddContact","autoComplete","disabled","propTyps","PropTypes","isRequired","Contacts","useEffect","fetchContacts","length"],"sourceRoot":""}